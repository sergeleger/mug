Introduction to Go
Moncton User Group
15 Mar 2016

Serge LÃ©ger
Prototype Developer, National Research Council
https://github.com/sergeleger/mug
@sergeleger

* About Me

- Bachelor of Computer Science from UdM.
- Started my career in 1994 with a local startup - Dovico.
- Joined the public service in 1998 to help transition internal applications to Y2K.
- In 2007, joined National Research Council where I work with researchers in a number of different fields.
- C, C++, Perl, HTML+Javascript+CSS, Java, Python, Go

* Go Language (golang)

Go is:

- Lightweight, avoids unnecessary repetition
- Object Oriented, but not in the usual way
- Concurrent, in a way that keeps you sane
- Designed for working programmers
- Compiled
- Statically typed
- Garbage collected
- Cross platform (Linux, Mac OSX, Windows, iOS, Android)

* What's Missing

- No type inheritance
- No method or operator overloading
- No generic programming
- No exceptions

* History

- Project starts at Google in 2007 by engineers frustrated with the complexity of C++
- Open source release in November 2009
- Version 1.0 in March 2012
- Version 1.1 in May 2013
- Version 1.2 in December 2013
- Version 1.3 in June 2014
- Version 1.4 in December 2014
- *Version*1.5* in August 2015 - Compiler & tools now written in Go. GC is now concurrent.
- Version 1.6 in February 2016

* Tutorial

* Hello World

.play code/01-hello-world.go

### Introduce the package export rules
### Introduce the camel-case

* Types and Variables

Go has many simple types:

    int, int8, int16, int32, int64
    uint, uint8, uint16, uint32, uint64, uintptr
    float32, float64
    complex64, complex128
    bool, byte, rune, string, error

But these are the ones you'll use most often:

    int, float64, bool, byte, string, error

`int` and `uint` are the natural or most efficient size for integers on a particular platform, either 32 or 64 bits.

All types have a *zero*value*, which is used to initialize variables. `0` for numbers, `false` for booleans, `""` for strings and `nil` for everything else.

* Variable Declaration

.play code/02-hello-world-with-types.go

- implicit type declaration
- short variable declaration
- unused variables

* Control Structures

* If statement

A simple `if` statement:

    if x > 0 {
        return y
    }

- Braces are mandatory, note the missing parentheses.
- The expression must evaluate to a boolean.
- There is also an optional `else` statement:

    if x > 0 {
        return y
    } else {
        return z
    }

* If statement (continued)

- Cascading `if`/`else` statements

    if x > 0 {
        return y
    } else if x < 0 {
        return z
    } else if x == 0 {
        return x
    } else {
        // Can't reach this condition?
    }

- `if` statements can also contain an initialization statement:

    if x = someFunction(); x != 0 {
        return z*x
    }

* If statement (playground)

.play code/04-if.go /func main/,/^}/

* Switch statement

A simple C-like `switch` statement:

.play code/05-switch.go /func main/,/^}/

- No `break` statement required, by default cases do not fall through.
- Use the `fallthrough` statement if that behavior is needed.

* Switch statement (continued)

Instead of using `fallthrough`, case statements can be combined:

.play code/06-switch.go /func main/,/^}/

* Switch statement (continued)

The switch's expression is optional, so a `switch` statement can be used to replace long and complex `if`/`else` cascades:

.play code/07-switch.go /func main/,/^}/

* For statement

Go has a single loop statement; the `for` loop has multiple forms:

    // C style
    for initialization; condition; post {
    }

Both, _initialization_ and _post_ are optional:

    // A traditional "while" loop
    for condition {
    }

_condition_ is also optional and defaults to `true`:

    // an infinite loop
    for {
    }

* For statement (continued)

- `break` statement terminates the execution of the inner-most loop
- `continue` statement begins the next iteration of the inner-most loop
- There is also a "for-each" operator: `range` which operates on `strings`, `arrays`, `slices`, `maps` and `channels`.

.play code/08-for.go /func main/,/^}/

* Constants, Custom Types, and Enumerated Types

* Constants

Constants are defined with the `const` keyword:

.play code/09-constants.go /const/,/^}/

* Iota

Go provides the `iota` constant generator to help construct constant values:

.play code/10-constants.go /const/,/^}/

* Custom Types

Using the `type` keyword we can create custom types:

.play code/11-types.go /type/,/^}/

* Enumerated Types

By combining constants and custom types we can create enumerated types:

    type Color uint64

    const (
        Red Color = iota
        Green
        Blue
    )

or bit masks (from Go's `net` package)

    type Flags uint
    const (
        FlagUp Flags = 1 << iota
        FlagBroadcast
        FlagLoopback
        FlagPointToPoint
        FlagMulticast
    )

* Collections and Complex Types

* Arrays

Arrays is a *fixed-length* sequence of zero or more elements. Since they are fixed-length arrays are rarely used.

    // An IP address
    var ip [4]byte
    ip[0] = 192
    ip[1] = 168
    ip[2] = 1
    ip[3] = 1

    // The same declaration
    var ip = [4]byte{ 192, 168, 1, 1 }

    // Another, the array size is calculated by the compiler
    var ip = [...]byte{ 192, 168, 1, 1 }

- The built-in `len` function returns the number of elements in the array.
- Arrays are always passed by value, so use with care.

* Arrays (playground)

.play code/12-arrays.go

* Slices

Slices represents variable-length sequences, like arrays, slices are indexable and have a length. Slices have another property: capacity. When a slice reaches its capacity, the Go runtime allocates more memory.

    // An IP address, using slices
    var ip []byte
    ip = append(ip, 192)
    ip = append(ip, 168)
    ip = append(ip, 1)
    ip = append(ip, 1)

    // The same declaration
    var ip = []byte{192, 168, 1, 1}

- `make` is a built-in function to create a new slice.
- `len` returns the length of the slice.
- `cap` returns the capacity of the slice.
- `append` appends elements to the slice.

* Slice Construction

A slice can be constructed using the `make` built-in function, providing a length and optionally an initial capacity.

.play code/13-slices.go /func main/,/^}/

Slices are backed by an array which Go grows to accommodate new elements.

* Length and Capacity

.play code/14-slices.go /func main/,/^}/

* Slice Operators

Go provides slice operators to create different views of the same in-memory array:

    var newSlice = slice[start:end] // start is inclusive and end is exclusive.

.play code/15-slices-op.go /func main/,/^}/

* Maps

Maps are Go's implementation of associative arrays. Maps are expressed as follows:

    map[KeyType]ValueType

.play code/16-maps.go /func main/,/^}/

* Map Construction

Maps must be created using the `make` built-in function:

.play code/17-maps.go /func main/,/^}/

- `make` is a built-in function to create a new map.
- `len` returns the length of the map.
- `delete` removes an entry from the map.

* Structures

A structure is a sequence of fields, each of which has a name, a type and optionally a `field`tag` which is metadata encoded in key/value pairs.

.code code/18-struct.go  /START OMIT/,/END OMIT/

* Structures (playground)

.play code/18-struct.go  /MAIN OMIT/,/MAINEND OMIT/

* Embedding structures and anonymous fields

Instead of doing the following (which says `Employee` as a field named `Person` of type `Person`):

    type Employee struct {
        Person Person
        Id     string
    }

We can omit the field name, this provides a convenient shortcut that allows the following shorter notation: `Employee.Name` instead of `Employee.Person.Name`.

.code code/19-struct.go /START OMIT/,/END OMIT/

* Embedding structures (playground)

.play code/19-struct.go /MAIN OMIT/,/MAINEND OMIT/

* Functions

* Functions

Function declaration has a name, a list of parameters, an optional list of results, and a body:

    func name(parameter-list) (result-list) {
        body
    }

.play code/20-functions.go /START OMIT/,/END OMIT/

* Functions with multiple return values

Functions can return multiple values, this is often used to return error conditions.

.play code/21-functions.go /START OMIT/,/END OMIT/

* Functions are first-class values

.play code/22-functions.go /START1 OMIT/,/END1 OMIT/

* Closures

.play code/22-functions.go /START3 OMIT/,/END3 OMIT/ HLnew

* Variadic functions

.play code/23-functions.go /START OMIT/,/END OMIT/

* Deferred Functions

The execution of a function can be deferred until the enclosing function returns. This is normally used with paired operations like *open/close* or *lock/unlock*.

.code code/24-defer.go /START OMIT/,/END OMIT/

* Deferred example

Deferred calls are stacked, so deferred functions are called in LIFO order:

.play code/24-functions.go /START OMIT/,/END OMIT/

* Objects

* Objects

In Go an object is simply a variable or value that has methods, a method is a function associated with a particular type.

Here is generic method definition:

    func (receiver) name(parameter-list) (result-list) {
        body
    }

- There is no inheritance in Go instead types are composed.
- There are no constructors or destructors either.

* Objects Example

.play code/25-objects.go /START OMIT/,/END OMIT/

* Methods with Pointer Receivers

The `Point.Distance` method uses a pass-by-value receiver meaning that any changes made to the `point` variable will be lost. Instead we can use a *pointer*receiver*

.play code/26-objects.go /START OMIT/,/END OMIT/

* Object Composition

.play code/27-objects.go /START OMIT/,/END OMIT/

* Interfaces

* Interfaces

Interfaces in Go are similar to interfaces from Java. Here is a generic interface definition:

    type Name interface {
        // List of functions ...
        fnName1(parameter-list) (result-list)
        fnName2(parameter-list) (result-list)
        fnName3(parameter-list) (result-list)

        // ...or list of other interfaces
        InterfaceName2
    }

- There is no requirement to declare that an object _implements_ an interface. The compiler ensures that an object properly implements the interface.
- Interfaces in Go are normally small with only a few methods.

* Interfaces from Go's io package

.code assets/go-interfaces.txt /START OMIT/,/END OMIT/

* Implementation of the io.Reader interface

.play code/28-interface.go /START OMIT/,/END OMIT/

* Interfaces

.code code/29-interface.go /SHAPE OMIT/,/SHAPEEND OMIT/

.code code/29-interface.go /SQUARE OMIT/,/ENDSQUARE OMIT/

.code code/29-interface.go /CIRCLE OMIT/,/ENDCIRCLE OMIT/

* Interfaces (playground)

.play code/29-interface.go /START OMIT/,/END OMIT/

* Empty Interface

An empty interface is an interface with no methods -- meaning that everything in Go satisfies the empty interface. This is similar to Java's `Object`. The empty interface type is written `interface{}`:

    var f interface{}

.play code/30-empty-interface.go /START OMIT/,/END OMIT/

* Type Assertions

Sometimes it is useful to either convert an interface to its underlying type or to convert it to another interface.

.play code/31-type-assertion.go /START OMIT/,/END OMIT/

* A complex type assertion example

.code code/32-type-assertion.go /DOUBLESTART OMIT/,/DOUBLEEND OMIT/

* From Type Assertions to Type Switches

.play code/32-type-assertion.go /MAIN OMIT/,/MAINEND OMIT/

* Type Switches

.code code/32-type-assertion.go /DOUBLESWITCHSTART OMIT/,/DOUBLESWITCHEND OMIT/

* Type Switches

.play code/32-type-assertion.go /MAIN OMIT/,/MAINEND OMIT/

* Concurrency

* Go supports concurrency

Go provides:

- concurrent execution (goroutines)
- synchronization and messaging (channels)
- multi-way concurrent control (select)

## * Concurrency vs Parallelism
##
## Concurrency is about dealing with lots of things at once.
##
## Parallelism is about doing lots of things at once.
##
## Concurrency is about structure, parallelism is about execution.
##
## Concurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable.

* Goroutines are not threads

They're a bit like threads, but cheaper. Small and resizeable stacks (~2KB versus ~1MB for threads).

Common to launch a large number of goroutines during the life of an application.

The Go runtime multiplexes goroutines across OS threads.

* Goroutines (launch and forget)

.play code/33-goroutine.go /START OMIT/,/END OMIT/

* Channels

Channels provide communication and synchronization mechanisms between goroutines. Each channel provides a conduit for values of a particular types.

    var chInt chan int // A channel of integers
    var chPtr chan *int // A channel of integer pointers

A channel is created with the built-in `make` function:

    chInt = make(chan int)

    chInt <- 42 // Send a value on the channel (blocks until another goroutine reads from chInt)

    // Reads a value (blocks until another goroutine is writing to chInt)
    v := <- chInt

    // Channels can be used with for/range loop
    for v := range chInt {
        // Do something with v
    }

    // Close a channel
    close(chInt)

* Ping-Pong

.play code/34-pingpong.go /START OMIT/,/END OMIT/

* More Concurrency

Go has a `select` statement that can multiplex multiple channels, similar to C's `select()` function for file handles or a `switch` statement.

    select {
    case v := <- ch1:
        // do something with v

    case ch2 <- "a string":

    default:
        // default is optional, if it's absent the whole select blocks until a case is ready
    }

Go also has a package `sync` and `sync/atomic` that provides regular synchronization mechanisms:

- sync.Mutex, sync.RWMutex, sync.WaitGroup
- atomic.CompareAndSwap, atomic.AddInt

* Packages

* Workspace Organization

The only configuration most users ever need is the GOPATH environment variable.

    export GOPATH=$HOME/projects/pivottable

The GOPATH variable is similar to Java's CLASSPATH variable and can contain more than one entry, seperated by `:` (or `;` on Windows).

A workspace contains at least one directory `src` which contains your project's source files (and third-party packages you may have installed). The Go tools will generate two other directories:

- `bin` contains your project's executable files
- `pkg` contains the compiled packages


* Package Construction

.code assets/directory.txt

In the example above, the pivottable project defines the following packages:

    import "pt"
    import "pt/ioutil"
    import "pt/report"
    import "pt/report/text"

* Package Construction

A package is defined by one or more `.go` files, each declaring the same package namespace using the `package` statement.

By convention, the directory name and the package name are the same, but it's not a requirement.

.code assets/ioutil-contents.txt


* Import Paths

    import (
        "fmt"
        "pt/ioutil"
        "github.com/ckeekybits/is"
        "google.golang.org/api/calendar/v3" // actual package name is "calendar"
    )

Import paths are only strings and have no meaning to the Go language, they're only used for looking up packages.

Go tools will use `GOROOT` and `GOPATH` to find the actual packages:

    $GOROOT/src/fmt

    $GOPATH/src/pt/ioutil
    $GOPATH/src/github.com/ckeekybits/is
    $GOPATH/src/google.golang.org/api/calendar/v3

* Standard Library

Go's standard library has about 150 packages:

- Input/Output (bufio, io, os, path, path/filepath)
- Networking (net, net/http)
- Types (strings, bytes, errors, time, strconv)
- Testing (testing)
- Reflection (reflect)
- Regular Expression (regexp)
- Many more... [[https://golang.org/pkg/][https://golang.org/pkg/]]

## * Go Tools
##
## - *go*run* - runs a Go "script" without explicitly building an executable.
## - *go*b
## - *gofmt* -
## - go test

* References

- The Go Programming Language, Alan A. A. Donovan & Brian W. Kernighan
- [[https://tour.golang.org/][https://tour.golang.org/]]
- [[https://golang.org/doc/effective_go.html][https://golang.org/doc/effective_go.html]]
- [[https://golang.org/ref/spec][https://golang.org/ref/spec]]
- [[https://golang.org/pkg][https://golang.org/pkg]]
